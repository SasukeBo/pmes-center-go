// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AddMaterialResponse struct {
	Material *Material    `json:"material"`
	Status   *FetchStatus `json:"status"`
}

// 分析料号的输入参数，实际上是分析料号的产品数据，选定x轴 y轴 以及分组字段
type AnalyzeMaterialInput struct {
	MaterialID int          `json:"materialID"`
	XAxis      Category     `json:"xAxis"`
	YAxis      YAxis        `json:"yAxis"`
	GroupBy    *Category    `json:"groupBy"`
	Duration   []*time.Time `json:"duration"`
	Limit      *int         `json:"limit"`
	Sort       *Sort        `json:"sort"`
}

type Device struct {
	ID   *int    `json:"id"`
	Name *string `json:"name"`
}

type DeviceResult struct {
	Device *Device      `json:"device"`
	Ok     *int         `json:"ok"`
	Ng     *int         `json:"ng"`
	Status *FetchStatus `json:"status"`
}

type EchartsResult struct {
	XAxisData  []string               `json:"xAxisData"`
	SeriesData map[string]interface{} `json:"seriesData"`
}

type ExportResponse struct {
	Percent  float64 `json:"percent"`
	Message  string  `json:"message"`
	FileName *string `json:"fileName"`
	Finished bool    `json:"finished"`
}

type LoginInput struct {
	Account  string `json:"account"`
	Password string `json:"password"`
}

type Material struct {
	ID            int     `json:"id"`
	Name          string  `json:"name"`
	CustomerCode  *string `json:"customerCode"`
	ProjectRemark *string `json:"projectRemark"`
}

type MaterialCreateInput struct {
	Name          string  `json:"name"`
	CustomerCode  *string `json:"customerCode"`
	ProjectRemark *string `json:"projectRemark"`
}

type MaterialResult struct {
	Material *Material    `json:"material"`
	Ok       *int         `json:"ok"`
	Ng       *int         `json:"ng"`
	Status   *FetchStatus `json:"status"`
}

type MaterialUpdateInput struct {
	ID            int     `json:"id"`
	CustomerCode  *string `json:"customerCode"`
	ProjectRemark *string `json:"projectRemark"`
}

type MaterialWrap struct {
	Total     *int        `json:"total"`
	Materials []*Material `json:"materials"`
}

type Point struct {
	ID         *int     `json:"id"`
	Name       *string  `json:"name"`
	UpperLimit *float64 `json:"upperLimit"`
	Nominal    *float64 `json:"nominal"`
	LowerLimit *float64 `json:"lowerLimit"`
}

type PointResult struct {
	Total   *int                   `json:"total"`
	S       *float64               `json:"s"`
	Ok      *int                   `json:"ok"`
	Ng      *int                   `json:"ng"`
	Cp      *float64               `json:"cp"`
	Cpk     *float64               `json:"cpk"`
	Avg     *float64               `json:"avg"`
	Max     *float64               `json:"max"`
	Min     *float64               `json:"min"`
	Dataset map[string]interface{} `json:"dataset"`
	Point   *Point                 `json:"point"`
}

type PointResultsWrap struct {
	PointResults []*PointResult `json:"pointResults"`
	Total        int            `json:"total"`
}

type Product struct {
	ID          *int                   `json:"id"`
	UUID        *string                `json:"uuid"`
	MaterialID  *int                   `json:"materialID"`
	DeviceID    *int                   `json:"deviceID"`
	Qualified   *bool                  `json:"qualified"`
	PointValue  map[string]interface{} `json:"pointValue"`
	CreatedAt   *time.Time             `json:"createdAt"`
	D2code      *string                `json:"d2code"`
	LineID      *string                `json:"lineID"`
	JigID       *string                `json:"jigID"`
	MouldID     *string                `json:"mouldID"`
	ShiftNumber *string                `json:"shiftNumber"`
}

type ProductWrap struct {
	TableHeader []string     `json:"tableHeader"`
	Products    []*Product   `json:"products"`
	Status      *FetchStatus `json:"status"`
	Total       *int         `json:"total"`
}

type Search struct {
	// 料号，指定料号
	MaterialID *int `json:"materialID"`
	// 设备名称，如果不为空则指定该设备生产
	DeviceID *int `json:"deviceID"`
	// 查询时间范围起始时间
	BeginTime *time.Time `json:"beginTime"`
	// 查询时间范围结束时间
	EndTime *time.Time `json:"endTime"`
	// 其他查询条件以map形式传递
	Extra map[string]interface{} `json:"extra"`
}

type SettingInput struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Size struct {
	ID         *int    `json:"id"`
	Name       *string `json:"name"`
	MaterialID *int    `json:"MaterialID"`
}

type SizeWrap struct {
	Total *int    `json:"total"`
	Sizes []*Size `json:"sizes"`
}

type SystemConfig struct {
	ID        *int       `json:"id"`
	Key       *string    `json:"key"`
	Value     *string    `json:"value"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

type User struct {
	ID      *int    `json:"id"`
	Account *string `json:"account"`
	Admin   *bool   `json:"admin"`
}

type YieldWrap struct {
	Name  string  `json:"name"`
	Ng    int     `json:"ng"`
	Value float64 `json:"value"`
}

type FetchStatus struct {
	Message *string `json:"message"`
	Pending *bool   `json:"pending"`
	FileIDs []int   `json:"fileIDs"`
}

type Category string

const (
	CategoryDate        Category = "Date"
	CategoryDevice      Category = "Device"
	CategoryJinID       Category = "jin_id"
	CategoryShiftNumber Category = "shift_number"
	CategoryLineID      Category = "line_id"
	CategoryMouldID     Category = "mould_id"
)

var AllCategory = []Category{
	CategoryDate,
	CategoryDevice,
	CategoryJinID,
	CategoryShiftNumber,
	CategoryLineID,
	CategoryMouldID,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryDate, CategoryDevice, CategoryJinID, CategoryShiftNumber, CategoryLineID, CategoryMouldID:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Sort string

const (
	SortAsc  Sort = "ASC"
	SortDesc Sort = "DESC"
)

var AllSort = []Sort{
	SortAsc,
	SortDesc,
}

func (e Sort) IsValid() bool {
	switch e {
	case SortAsc, SortDesc:
		return true
	}
	return false
}

func (e Sort) String() string {
	return string(e)
}

func (e *Sort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sort", str)
	}
	return nil
}

func (e Sort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type YAxis string

const (
	YAxisYield  YAxis = "Yield"
	YAxisAmount YAxis = "Amount"
)

var AllYAxis = []YAxis{
	YAxisYield,
	YAxisAmount,
}

func (e YAxis) IsValid() bool {
	switch e {
	case YAxisYield, YAxisAmount:
		return true
	}
	return false
}

func (e YAxis) String() string {
	return string(e)
}

func (e *YAxis) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = YAxis(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid YAxis", str)
	}
	return nil
}

func (e YAxis) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
